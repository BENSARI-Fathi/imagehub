// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.6.1
// source: v1/pb/imagehub.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImageReposClient is the client API for ImageRepos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageReposClient interface {
	Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (ImageRepos_CloneClient, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Push(ctx context.Context, opts ...grpc.CallOption) (ImageRepos_PushClient, error)
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
}

type imageReposClient struct {
	cc grpc.ClientConnInterface
}

func NewImageReposClient(cc grpc.ClientConnInterface) ImageReposClient {
	return &imageReposClient{cc}
}

func (c *imageReposClient) Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (ImageRepos_CloneClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImageRepos_ServiceDesc.Streams[0], "/imagehub.imageRepos/Clone", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageReposCloneClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ImageRepos_CloneClient interface {
	Recv() (*CloneResponse, error)
	grpc.ClientStream
}

type imageReposCloneClient struct {
	grpc.ClientStream
}

func (x *imageReposCloneClient) Recv() (*CloneResponse, error) {
	m := new(CloneResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imageReposClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/imagehub.imageRepos/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageReposClient) Push(ctx context.Context, opts ...grpc.CallOption) (ImageRepos_PushClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImageRepos_ServiceDesc.Streams[1], "/imagehub.imageRepos/Push", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageReposPushClient{stream}
	return x, nil
}

type ImageRepos_PushClient interface {
	Send(*PushRequest) error
	CloseAndRecv() (*PushResponse, error)
	grpc.ClientStream
}

type imageReposPushClient struct {
	grpc.ClientStream
}

func (x *imageReposPushClient) Send(m *PushRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imageReposPushClient) CloseAndRecv() (*PushResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PushResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imageReposClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, "/imagehub.imageRepos/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageReposServer is the server API for ImageRepos service.
// All implementations must embed UnimplementedImageReposServer
// for forward compatibility
type ImageReposServer interface {
	Clone(*CloneRequest, ImageRepos_CloneServer) error
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Push(ImageRepos_PushServer) error
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
	mustEmbedUnimplementedImageReposServer()
}

// UnimplementedImageReposServer must be embedded to have forward compatible implementations.
type UnimplementedImageReposServer struct {
}

func (UnimplementedImageReposServer) Clone(*CloneRequest, ImageRepos_CloneServer) error {
	return status.Errorf(codes.Unimplemented, "method Clone not implemented")
}
func (UnimplementedImageReposServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedImageReposServer) Push(ImageRepos_PushServer) error {
	return status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedImageReposServer) Check(context.Context, *CheckRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedImageReposServer) mustEmbedUnimplementedImageReposServer() {}

// UnsafeImageReposServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageReposServer will
// result in compilation errors.
type UnsafeImageReposServer interface {
	mustEmbedUnimplementedImageReposServer()
}

func RegisterImageReposServer(s grpc.ServiceRegistrar, srv ImageReposServer) {
	s.RegisterService(&ImageRepos_ServiceDesc, srv)
}

func _ImageRepos_Clone_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CloneRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImageReposServer).Clone(m, &imageReposCloneServer{stream})
}

type ImageRepos_CloneServer interface {
	Send(*CloneResponse) error
	grpc.ServerStream
}

type imageReposCloneServer struct {
	grpc.ServerStream
}

func (x *imageReposCloneServer) Send(m *CloneResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ImageRepos_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageReposServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imagehub.imageRepos/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageReposServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageRepos_Push_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageReposServer).Push(&imageReposPushServer{stream})
}

type ImageRepos_PushServer interface {
	SendAndClose(*PushResponse) error
	Recv() (*PushRequest, error)
	grpc.ServerStream
}

type imageReposPushServer struct {
	grpc.ServerStream
}

func (x *imageReposPushServer) SendAndClose(m *PushResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imageReposPushServer) Recv() (*PushRequest, error) {
	m := new(PushRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ImageRepos_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageReposServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imagehub.imageRepos/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageReposServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageRepos_ServiceDesc is the grpc.ServiceDesc for ImageRepos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageRepos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imagehub.imageRepos",
	HandlerType: (*ImageReposServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _ImageRepos_Register_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _ImageRepos_Check_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Clone",
			Handler:       _ImageRepos_Clone_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Push",
			Handler:       _ImageRepos_Push_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "v1/pb/imagehub.proto",
}
